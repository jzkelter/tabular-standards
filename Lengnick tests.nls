
to run-tests
  let fails 0
  set fails fails + test-adjust-wage-rate
  set fails fails + test-allocate-profits
  set fails fails + test-distribute-profits  
  print word fails " tests failed"
end





to-report test-distribute-profits
  ca  
  let fails 0
  create-households 10 [
    set liquidity 1
  ]
  set PROFITS-TO-ALLOCATE 100
  distribute-profits
  
  if not all? households [liquidity = 11] and PROFITS-TO-ALLOCATE = 0[
    print "FAILED test-distribute-profits when all households should have receieved equally"
    set fails fails + 1 
  ]
  
  set PROFITS-TO-ALLOCATE 108
  ask households [set liquidity 1]
  ask household 0 [set liquidity 9]
  if not all? households with [who > 0] [liquidity = 7] and [liquidity] of household 0 != 63 and PROFITS-TO-ALLOCATE = 0[
    print "FAILED test-distribute-profits when households should have received unequally"
    set fails fails + 1 
  ]
  
  report report-pass-fail "PASS all test-distribute-profits tests" fails
end



to-report test-allocate-profits
  ca  
  let fails 0
  create-households 10     
  
  
  create-firms 1 [
    set wage-rate 10    
    create-b-links-with households
    set liquidity 10
    allocate-profits
    if liquidity != 10 or PROFITS-TO-ALLOCATE != 0 [
      print "FAILED test-allocate-profits when there were no profits to allocate"
      set fails fails + 1 
    ]
    
    set liquidity 9
    allocate-profits
    if liquidity != 9 or PROFITS-TO-ALLOCATE != 0 [
      print "FAILED test-allocate-profits when there were no profits to allocate"
      set fails fails + 1 
    ]
    
    set liquidity 100
    allocate-profits
    if liquidity != 10 or PROFITS-TO-ALLOCATE != 90 [
      print "FAILED test-allocate-profits when there were profits to allocate"
      set fails fails + 1 
    ]
  ]        
  
  report report-pass-fail "PASS all test-allocate-profits tests" fails
end

to-report test-adjust-wage-rate
  ca
  set-constants
  let fails 0
  
  ;; test when wage should be increased
  create-firms 1 [
    set wage-rate 10
    set months-with-all-positions-filled 0 ; 0 months with unfilled positions means failed to hire this past month
   
    let new-wage (1 + seeded-random-number 1 δ) * 10
    random-seed 1
    
    adjust-wage-rate    
    if wage-rate != new-wage [
      set fails fails + 1
      print "FAILED test-adjust-wage-rate when wage rate should have been raised"
    ]
  ]
  
  ;; test when wage should stay the same
  ask firm 0 [ 
    set months-with-all-positions-filled 1
    set wage-rate 10
    adjust-wage-rate
    if wage-rate != 10 [
      set fails fails + 1
      print "FAILED test-adjust-wage-rate when wage rate should have stayed the same"
    ]   
    set months-with-all-positions-filled 23
    adjust-wage-rate
    if wage-rate != 10 [
      set fails fails + 1
      print "FAILED test-adjust-wage-rate when wage rate should have stayed the same"
    ]       
  ]
  
  ;; test when wage lower
  ask firm 0 [ 
    set months-with-all-positions-filled 24
    set wage-rate 10
    let new-wage (1 - seeded-random-number 1 δ) * 10
    random-seed 1
    adjust-wage-rate
    if wage-rate != new-wage [
      set fails fails + 1
      print "FAILED test-adjust-wage-rate when wage rate should have been lowered"
    ]   
  ]
  
  
  report report-pass-fail "PASS all test-adjust-wage-rate tests" fails
  
end

to-report report-pass-fail [message fails]
  if fails = 0 [print message]
  report fails
end


to-report seeded-random-number [seed n]
  random-seed seed
  report random-float n
end