;the following lines define all of the breeds, this includes breeds for housholds, firms, and every type of link between breeds
breed [households household]
breed [firms firm]
breed [banks bank]

;links between firms and households for consumption
undirected-link-breed [consumer-links consumer-link]

;links between firms and households for employment
undirected-link-breed [employment-links employment-link]

undirected-link-breed [equity-links equity-link]

;link between firms and other firms for supply distribution.
directed-link-breed [framework-agreements framework-agreement] ;adjust these procedures too

;defines fields that apply to all turtles
turtles-own [
  liquidity  ; i.e. money currently available (m_h for households and m_f for firms in Lengnick )
]

;defines household specific fields
households-own [
  reservation-wage  ; minimal claom on labor income, although households will work for less under certain conditions  (w_h in  Lengnick)
  demanded-consumption ; c_h^r / 21 in Lengnick, the amount of goods that are demanded by each household
]

;defines firm specific fields
firms-own [
  firm-type ; # a label for the firm
  input-data ; the firm types and productivity that firms need to buy from
  inventory  ; # amount of goods stored and ready to be sold (i_f in Lengnick)
  price  ; the price of goods (p_f in Lengnick)
  wage-rate ; w_f in Lengnick

  last-open-position  ; the month that the firm last had an open position
  
  desired-n-workers ;represents the desired number of workers for the month
  previous-sales

  demand  ; the most recent demand this firm experienced for its goods
  tech-parameter  ; This multiplies the number of workers to determine how much inventory is produced (lambda in Lengnick)
  consumer-good-firm?       ; defines whether they produce consumer goods
]

;defines consumers investment within a certain firm, equity links remain even if a household changes employment
equity-links-own [
  equity-percent      ;represents what perent of a firm is owned by a household
]

;defines consumer link specific fields
consumer-links-own [
  demand-not-satisfied   ;the amount that a firm was unable to satisfy when asked by a household
]

;defines framework-agreement specific fields
framework-agreements-own[
  input-firm-type
  demand-not-satisfied
  worth
]

;defines all global variables, see Lengnick paper or "setup-constants" for a description of what each of these does
globals [
  EQUITY_AMOUNT
  WAGE_AMOUNT
  TOTAL-BANKRUPT-FIRMS
  month
  month-length  ; 21 to reflect number of business days
  index-value
  MIN-WAGE-RATE
  FIRM-STRUCTURE
  max-wage-growth
  months-to-lower-wage 
  max-price-growth
  prob-firm-changes-price
  inventory-floor
  inventory-ceiling 
  price-floor 
  price-ceiling 
  buffer-labor-fraction
  diminishing-utility-constant 
  prob-replace-firm-price
  prob-replace-firm-quant 
  price-diff-lower-bound
  capital-requirement-coefficient
  policy-interest-rate
  max-interest-markup
  prob-new-firm-enters
  n-trading-links
  n-framework-agreements
  autonomous-consumption
]

;general setup procedure, calls all other sub-setup procedures in some capacity to generate an initial state for the model
to setup
  ca

  set-constants
  set MIN-WAGE-RATE 2.5
  set TOTAL-BANKRUPT-FIRMS 0
  

  create-households n-households [
    set shape "circle" ; "person"
    set ycor min-pycor + 1 + random 10
    
    
    ;set heading 0                                ORIGINAL LOCATION PROCEDURES
    ;rt (who - n-firms) * (360 / n-households)     
    ;fd 11 + random 5
    set color blue
    set size 0.5
    set liquidity 98.78  ; arbitrary initial condition taken from Nardin - I tried starting everyone with two months of wages in bank, but didn't work so well
    ;set-house-size
  ]
  setup-firms
  initialize-framework-agreements
  ask households[
    set xcor liquidity / mean [liquidity] of households
    create-consumer-links-with n-of n-trading-links firms with [consumer-good-firm?][
      init-consumer-link
    ]
    if count my-employment-links = 0 [create-employment-link-with one-of firms [init-employment-link]]  ; households that didn't get employed when firms were created get employed
    set reservation-wage [wage-rate] of my-employer
    set-consumption  ; this has to be set after households have trading connections to calculate mean price
  ]

  ask firms [  ; these parameters are set after the creation of households and creating of links so they can be estimated from the firm's current size
    ;set-firm-size      ;this was the previous method to create firm sizes based on number of employees
    set liquidity decide-reserve + (wage-rate * count my-employment-links)  ; model begins at the beginning of a month, so start with the buffer amount  WILL: and adding in enough wage to pay employees
    ; set months-with-all-positions-filled 2  ; arbitrary. Want it to be > 0 so they don't try to immediately lower wage
    set last-open-position -2 * months-to-lower-wage  ; arbitrarily set > γ so firms don't try to immediately lower wage
    if input-data != "None" [  ;input-data being anything other than None implies that firm must take some sort of input
      set inventory 50 ; I tried (.5 * demand) to start with inventory such that firms won't want to hire or fire on the first tick, but didn't seem to work
      set-daily-input-demands
    ]
    set demand n-workers * tech-parameter
    set desired-n-workers n-workers
  ]
  ;initialize-input-firm-demands   ;needs to be after employment is set so that firms can calculate number of employees and buffer amount
  setup-equity-links
  ask one-of firms [ask my-links [show-link]]
  if include-visualizations? = False [
    ask turtles [
      hide-turtle
    ]
    ask links [
      hide-link
    ]
  ]
  reset-ticks
  tick
end

;procedure to initialize all global constants
to set-constants
  set max-wage-growth 0.019  ; δ in Lengnick: max amount wages are increased or decreased by (his code has .02) 
  set months-to-lower-wage 12  ; γ in Lengnick: after this many months of having all positions filled, a firm will decrease wages, paper uses 24
  set max-price-growth 0.2 ;  ν in Lengnick: the max amount a firm increases/decreases prices by, (paper uses 0.02)
  set prob-firm-changes-price 0.25  ; θ in Lengnick: Prob that a firm changes prices, when the price is outside their range
  set inventory-floor 0.5  ; ϕ_lowerbar in lengnick: if inventory is below this fraction of demand, the firm tries to hire
  set inventory-ceiling 1.25 ; ϕ_upperbar in lengnick: if inventory is above this fraction of demand, the firm fires a worker
  set price-floor 1.025  ; φ_lowerbar in lengnick: if price is below this fraction of marginal-costs (along with other conditions) increase price
  set price-ceiling 1.15  ; φ_upperbar in Lengnick: if price is above this fraction of marginal-costs (along with other conditions), decrease price
  set buffer-labor-fraction 2  ; χ in Lengnick: the fraction of labor costs to keep as a buffer  (in the future this could be a firm specific parameter depending on the firm's risk/aggression)
  set diminishing-utility-constant 0.5  ; α in Lengnick: the decay rate of how much wealth is used on consumption by households
  set prob-replace-firm-price 0.25  ;this is Ψprice in Lengnick, the probability of switching trading firms based on price
  set prob-replace-firm-quant 0.5  ;this is Ψquant in Lengnick, the probability of switching trading firms based on lack of quantity
  set price-diff-lower-bound 0  ; ξ in Lengnick, A consumer will switch firms based on price if the new firm is at least this fraction cheaper, his code uses 0.01 //WILL June 2021, we changed this to 0 because 0.01 seems equally as arbitrary
  set n-trading-links 7           ;Z in Gatti, number of firms contacted by consumers trying to buy consumer goods. Lengnick uses 7 Gatti uses 2
  set n-framework-agreements 5
  set month-length 21
  set autonomous-consumption 1.6     ;represents a monetary amount of autonomous consumption among households 1.9 tends to work well
  ifelse single-firm-type? [
    set FIRM-STRUCTURE table:get (table:from-json-file "Single-Firm-structure.json") "Firms"
  ] [
    set FIRM-STRUCTURE table:get (table:from-json-file "Multi-Firm-structure.json") "Firms"
  ]
end

;setup procedure for firms, creates every firm in the model according to the specifications in a json file
to setup-firms
  foreach FIRM-STRUCTURE[ f ->
    let group table:get f "Firm type"
    let num-firms table:get f "Firm count"
    let firm-input-data generate-input-data table:get f "Input data"
    let firm-tech-parameter table:get f "Tech constant"
    let is-consumer? table:get f "Consumer?"
    create-firms num-firms[
      set shape "building store"
      ;set heading 0             Original location procedure
      ;rt who * (360 / n-firms)
      ;fd 2 + random 6
      set color brown
      set tech-parameter firm-tech-parameter ; λ in Lengnick
      set price 1 * small-random-change ; arbitrary, set to 1 for convenience
      set firm-type group
      set input-data firm-input-data
      set wage-rate tech-parameter * transactions-per-month * small-random-change ;start with same wage rate as output, which is the tech parameter times transactions per month
      create-employment-link-with one-of households with [count my-employment-links = 0] [init-employment-link]
      set consumer-good-firm? is-consumer?
      set xcor 0
      set ycor 12 - random 5
      if consumer-good-firm? [set ycor ycor - 9]
    ]
  ]
end

to setup-equity-links
  ask firms [
    let num-employees count employment-link-neighbors
    let equity-per-employee 1 / num-employees
    let f self
    ask employment-link-neighbors [
      set liquidity liquidity - equity-per-employee     ;this forces all liquidity to be initialized with households
      create-equity-link-with f [
        init-equity-link
        set equity-percent equity-per-employee     ;all employees should have equal amounts of equity-percent invested in the firm
      ]
    ]
  ]
end

;generates the input data for a specific firm based on the structure specified in a json file
to-report generate-input-data [original-data]
  
  ifelse length original-data = 0 [  ;;empty list means default settings
    report "None"
  ][
    let data-table table:make
    foreach original-data [i ->
      let inputi table:make
      table:put inputi "Marginal productivity" (table:get i "Marginal productivity")
      table:put inputi "Current stock" 0
      table:put inputi "Daily demand" 0
      table:put data-table (table:get i "Input firm type") inputi
    ]
    report data-table
  ]
end

;creates a single firm's framework agreements to all necessary suppliers
to initialize-framework-agreements
  ask firms with [input-data != "None"][
    let temp-n-framework-agreements n-framework-agreements
    foreach table:keys input-data[i ->
      if any? firms with [firm-type = i and n-out-agreements = 0][
        set temp-n-framework-agreements temp-n-framework-agreements - 1
        create-framework-agreement-from one-of firms with [firm-type = i and n-out-agreements = 0][
          init-framework-agreement i
        ]
      ]
      let current-firm self
      ask n-of temp-n-framework-agreements firms with [firm-type = i and not out-framework-agreement-neighbor? self][
        create-framework-agreement-to current-firm[
          init-framework-agreement i
        ]
      ]
    ]
  ]
end

;sets the initial input demands for all firms, this allows firms to estimate production up front and hire labor and set costs
to initialize-input-firm-demands
  let firm-types (list)
  let firms-done-setting-demand (list)
  let firms-ready-to-set-demand (list)
  foreach FIRM-STRUCTURE[t ->
    set firm-types fput table:get t "Firm type" firm-types
    if not table:get t "Consumer?"[
      set firms-done-setting-demand fput table:get t "Firm type" firms-done-setting-demand
      let input-firms table:get t "Input data"
      foreach input-firms[f ->
        set firms-ready-to-set-demand fput table:get f "Input firm type" firms-ready-to-set-demand
      ]
    ]
  ]
  let finished? false
  while [not finished?][
    let new-ready-firms (list)
    foreach firms-ready-to-set-demand [f ->
      let aggregate-monthly-quantity-demanded 0
      ask firms with [uses-input? f][
        set aggregate-monthly-quantity-demanded (aggregate-monthly-quantity-demanded + (month-length * (daily-input-demand f)))
      ]
      ;******* This next part of the procedure is definitely up for debate on how to implement **********
      let average-demand (aggregate-monthly-quantity-demanded / (count firms with [firm-type = f]))
      ask firms with [firm-type = f][
        set demand (average-demand * (1 + (random-float 0.25)))
        set-daily-input-demands
      ]
      set firms-done-setting-demand fput f firms-done-setting-demand
      set firms-ready-to-set-demand remove f firms-ready-to-set-demand
      let global-firm-data item 0 (filter [i -> table:get i "Firm type" = f] FIRM-STRUCTURE)
      let firm-input-data table:get global-firm-data "Input data"
      if firm-input-data != "None"[
        foreach firm-input-data[i ->
          set new-ready-firms fput i new-ready-firms
        ]
      ]
    ]
    ifelse (length firms-done-setting-demand = length firm-types) or (length new-ready-firms = 0)[
      set finished? true
    ][
      set firms-ready-to-set-demand new-ready-firms
    ]
  ]
end