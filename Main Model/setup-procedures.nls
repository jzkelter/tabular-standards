;links between firms and households for consumption
undirected-link-breed [consumer-links consumer-link]

;links between firms and households for employment
undirected-link-breed [employment-links employment-link]

undirected-link-breed [equity-links equity-link]

;link between firms and other firms for supply distribution.
directed-link-breed [framework-agreements framework-agreement]

;defines consumers investment within a certain firm, equity links remain even if a household changes employment
equity-links-own [
  equity                           ; represents what perent of a firm is owned by a household
]

;defines consumer link specific fields
consumer-links-own [
  demand-not-satisfied             ; the amount that a firm was unable to satisfy when asked by a household
]

;defines framework-agreement specific fields
framework-agreements-own[
  demand-not-satisfied
  index-multiplier                 ; relating index to price, used to find price from a given index
  index-type                       ; identifies which index the framework agreement is based on, index-type = 0 indicates price should be used 
  expiration-date                  ; tick when framework-agreement will expire
]

;defines all global variables, see "setup-constants" for a description of what each of these does
globals [
  CONSUMER-GOOD-FIRMS              ; defined as firms that produce goods purchased by households           
  PRIMARY-GOOD-FIRMS               ; defined as firms that produce goods without needing an input                 
  INTERMEDIATE-GOOD-FIRMS          ; defined as firms that do not produce consumer goods and take input             
  TOTAL-BANKRUPT-FIRMS             ; defined as the total number of firms bankrupt in the model
  PRIMARY-INVENTORY-VALUE-HISTORY  ; defined as the rolling average of the total inventory of the last two years of the primary good firms
  BANKRUPT-FIRM-PROFITS            ; list of lifetime-profits. A "profit" is added to the list if the firm goes bankrupt
  UNEMPLOYMENT-RATES               ; stores a list of historical data for unemployment rates
  MEAN-PRICES                      ; stores a list of historical data for the mean price every year
  
  MIN-WAGE-RATE                    ; max amount wages are increased or decreased by if firm decides to change wage
  FIRM-STRUCTURE                   ; global data holding how many firms are initialized
  MAX-WAGE-GROWTH                  ; defined as the max amount a firm can increase or decrease their wage if they decide to change their wage
  MONTHS-TO-LOWER-WAGE             ; after this many months of having all positions filled, a firm will decrease wages
  MAX-PRICE-GROWTH                 ; defined as the max amount a firm increases/decreases prices by
  BUFFER-LABOR-FRACTION            ; the fraction of labor costs to keep as a buffer
  DIMINISHING-UTILITY-CONSTANT     ; the decay rate of how much wealth is used on consumption by households, used in consumption function
  PROB-REPLACE-FIRM-PRICE          ; the probability of switching trading firms to a new firm with a better price
  PROB-REPLACE-FIRM-QUANT          ; the probability of switching trading firms based on lack of quantity
  N-TRADING-LINKS                  ; number of firms contacted by consumers trying to buy consumer goods
  N-FRAMEWORK-AGREEMENTS           ; number of firms contacted by non-primary firms trying to buy input goods
  AUTONOMOUS-CONSUMPTION           ; represents amount in goods of autonomous consumption among households, regardless of wage
  STARTUP-LIQUIDITY                ; agents are initialized to a constant liquidity
  BACKGROUND-IMPROVEMENT           ; the background improvement on each patch after each tick 
  DESIRED-BUFFER-PERCENT           ; represents the desired buffer as a percent of expected sales. 
  
  month                            ; the current tick
  pringle-index-value              ; index id: 1
  coats-index-value                ; index id: 2
  ussher-index-value               ; index id: 3
  potvin-index-value               ; index id: 4
]


;general setup procedure, calls all other sub-setup procedures in some capacity to generate an initial state for the model
to setup
  ca
  
  set-constants
  set TOTAL-BANKRUPT-FIRMS 0
  set pringle-index-value 1
  set coats-index-value 1            
  set ussher-index-value 1              
  set potvin-index-value 1
    
  
  ;; setup agents
  
  create-households n-households [
    set shape "circle" 
    set ycor min-pycor + 1 + random 10
    set size 0.5
    set liquidity STARTUP-LIQUIDITY  
  ]
  
  setup-firms         
  initialize-framework-agreements
      
  ask households[
    set-household-xcor
    create-consumer-links-with up-to-n-of N-TRADING-LINKS firms with [consumer-good-firm?] [
      init-consumer-link
    ]
    if count my-employment-links = 0 [create-employment-link-with one-of firms [init-employment-link]]  ; households that didn't get employed when firms were created get employed
    set reservation-wage [wage-rate] of my-employer
    set-consumption             ; this has to be set after households have trading connections to calculate mean price
  ]

  ask firms [    
    set liquidity raise-funds
    set lifetime-profits liquidity * -1
    set months-without-vacancies 0
    set demand max-production   ; demand initialized to be the intial output of the firm
    set desired-n-workers n-workers   ; workers initially want the number of workers they have
    set-input-demands   
    set previous-sales max-production
    set inventory (DESIRED-BUFFER-PERCENT * previous-sales)        ;firms start with the ideal buffer amount times their market share
    
    ;; There is no need to start with initial stock I don't think. Firms buy at the beginning of the tick
;    foreach table:keys input-data [ i ->  ; firms start with stock equal to their des
;      set-stock i (DESIRED-BUFFER-PERCENT * previous-sales)  ; / (marginal-productivity i))
;    ]
    set average-previous-sales max-production
  ]
  
  
  set-colors
  ask one-of firms [ask my-links [show-link]]
  
  setup-patches
  
  
  set PRIMARY-INVENTORY-VALUE-HISTORY (list (sum [inventory] of firms))
  set BANKRUPT-FIRM-PROFITS (list)
  set UNEMPLOYMENT-RATES (list 0)
  set MEAN-PRICES (list mean [price] of firms)
      
  
  reset-ticks
  tick
end

;procedure to initialize all global constants
to set-constants
  set MIN-WAGE-RATE 2.5
  set MAX-WAGE-GROWTH 0.019                
  set MONTHS-TO-LOWER-WAGE 1              
  set MAX-PRICE-GROWTH 0.05                 
  set BUFFER-LABOR-FRACTION 3               
  set DIMINISHING-UTILITY-CONSTANT 0.25  
  set PROB-REPLACE-FIRM-PRICE 0.25         
  set PROB-REPLACE-FIRM-QUANT 0.5          
  set N-TRADING-LINKS 7                    
  set N-FRAMEWORK-AGREEMENTS 7             
  set AUTONOMOUS-CONSUMPTION 0         
  set STARTUP-LIQUIDITY 100                
  set BACKGROUND-IMPROVEMENT 10
  set DESIRED-BUFFER-PERCENT 0.5
  
  (ifelse setup-structure = "single-firm" [ ;diminishing utility constant = 0.2-0.3 works well
    set FIRM-STRUCTURE table:get (table:from-json-file "Single-Firm-structure.json") "Firms"
  ] 
  setup-structure = "two-layer" [
    set FIRM-STRUCTURE table:get (table:from-json-file "Two-Layer-Firm-structure.json") "Firms"
  ]
  setup-structure = "three-layer" [
    set FIRM-STRUCTURE table:get (table:from-json-file "Three-Layer-Firm-structure.json") "Firms"
  ]
  setup-structure = "diamond" [
    set FIRM-STRUCTURE table:get (table:from-json-file "Diamond-Firm-structure.json") "Firms"
  ]
  setup-structure = "looped-diamond" [
    set FIRM-STRUCTURE table:get (table:from-json-file "Looped-Diamond-Firm-structure.json") "Firms"
  ])
  
end

;setup procedure for firms, creates every firm in the model according to the specifications in a json file
to setup-firms
  let firm-ratio-sum 0
  foreach FIRM-STRUCTURE[ f ->     ; we need to first find out how many firms to create
    set firm-ratio-sum firm-ratio-sum + table:get f "Firm count"  ; final sum should be 
  ]
  foreach FIRM-STRUCTURE[ f ->
    let group table:get f "Firm type"
    let firm-ratio table:get f "Firm count"
    let firm-tech-parameter table:get f "Tech constant"
    let is-consumer? table:get f "Consumer?"
    let is-intermediate? table:get f "Intermediate?"
    let is-primary? table:get f "Primary?"

    create-firms ceiling ((firm-ratio / firm-ratio-sum) * n-firms) [
      
      set shape "building store"
      set tech-parameter firm-tech-parameter 
      set price 1 * small-random-change
      set firm-type group
      set input-data make-input-data-table table:get f "Input data"
      set wage-rate tech-parameter
      set consumer-good-firm? is-consumer?
      set intermediate-good-firm? is-intermediate?
      set primary-good-firm? is-primary?
      set fired-worker? false
      
      create-employment-link-with one-of households with [count my-employment-links = 0] [init-employment-link]
      
      set ycor 12 - random 5
      if table:length input-data != 0 [set ycor ycor - 9]
    ]
  ]

  set CONSUMER-GOOD-FIRMS firms with [consumer-good-firm?]
  set PRIMARY-GOOD-FIRMS firms with [primary-good-firm?]
  set INTERMEDIATE-GOOD-FIRMS firms with [intermediate-good-firm?]
  
end


;generates the input data for a specific firm based on the structure specified in a json file
to-report make-input-data-table [original-data]
  ifelse length original-data = 0 [  ;;empty list means default settings of empty table
    report table:make
  ][
    let data-table table:make
    foreach original-data [i ->
      let inputi table:make
      table:put inputi "Marginal productivity" (table:get i "Marginal productivity")
      table:put inputi "Current stock" 0
      table:put inputi "Monthly demand" 0
      table:put data-table (table:get i "Input firm type") inputi
    ]
    report data-table
  ]
end

;creates a single firm's framework agreements to all necessary suppliers
to initialize-framework-agreements
  ask firms [
    foreach table:keys input-data [ i ->
      ask up-to-n-of N-FRAMEWORK-AGREEMENTS firms with [firm-type = i] [  ; some firms might not get a framework agreement using this procedure, but that is okay. they will be replaced if they can't make stuff
        create-framework-agreement-to myself [init-framework-agreement]        
      ]
    ]
  ]
end

to setup-patches
  ask firms [
    set firm-location (patch (((who - n-households) mod world-width) + min-pycor) (max-pxcor - (floor ((who - n-households) / world-width))))
    set soil-health random 50
    let patch-health soil-health
    ask firm-location [
      set pcolor scale-color black patch-health 0 200
    ]
  ]
end