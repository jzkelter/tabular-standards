;the following lines define all of the breeds, this includes breeds for housholds, firms, and every type of link between breeds
breed [households household]
breed [firms firm]
breed [banks bank]

;links between firms and households for consumption
undirected-link-breed [consumer-links consumer-link]

;links between firms and households for employment
undirected-link-breed [employment-links employment-link]

undirected-link-breed [equity-links equity-link]

;link between firms and other firms for supply distribution.
directed-link-breed [framework-agreements framework-agreement]

;defines fields that apply to all turtles
turtles-own [
  liquidity                       ; i.e. money currently available
]

;defines household specific fields
households-own [
  reservation-wage                ; minimal claim on labor income, although households will work for less under certain conditions
  demanded-consumption            ; the amount of goods that are demanded by each household
]

;defines firm specific fields
firms-own [
  firm-type                        ; # a label for the firm
  input-data                       ; the firm types and productivity that firms need to buy from
  inventory                        ; # amount of goods stored and ready to be sold
  price                            
  wage-rate                        
  
  months-failed-to-hire            ; consecutive months that firms failed to hire
  
  desired-n-workers                ; represents the desired number of workers for the month
  previous-sales

  demand                           ; the most recent demand this firm experienced for its goods     (previous-sales used in calculations instead, so we can remove this variable if we want)
  tech-parameter                   ; determines how much each worker produces given a 
  consumer-good-firm?              ; defines whether they produce consumer goods
]

;defines consumers investment within a certain firm, equity links remain even if a household changes employment
equity-links-own [
  equity                           ; represents what perent of a firm is owned by a household
]

;defines consumer link specific fields
consumer-links-own [
  demand-not-satisfied             ; the amount that a firm was unable to satisfy when asked by a household
]

;defines framework-agreement specific fields
framework-agreements-own[
  demand-not-satisfied
  index-multiplier                 ; relating index to price, used to find price from a given index
  index-type                       ; identifies which index the framework agreement is based on, index-type = 0 indicates price should be used 
]

;defines all global variables, see "setup-constants" for a description of what each of these does
globals [
  CONSUMER-GOOD-FIRMS              ; defined as firms that produce goods purchased by households                    (firms with [consumer-good-firm?])
  PRIMARY-GOOD-FIRMS               ; defined as firms that produce goods without needing an input                   (firms with [input-data = "None"])
  INTERMEDIATE-GOOD-FIRMS          ; defined as firms that do not produce consumer goods and take input             (firms with [not consumer-good-firm? and not input-data = "None"])
  TOTAL-BANKRUPT-FIRMS
  LAST-TWO-YEARS-INVENTORY
  MONTH-LENGTH 
  
  MIN-WAGE-RATE
  FIRM-STRUCTURE
  max-wage-growth
  months-to-lower-wage 
  max-price-growth
  buffer-labor-fraction
  diminishing-utility-constant 
  prob-replace-firm-price
  prob-replace-firm-quant 
  n-trading-links
  n-framework-agreements
  autonomous-consumption
  startup-liquidity
  
  month
  pringle-index-value              ; index id: 1
  coats-index-value                ; index id: 2
  ussher-index-value               ; index id: 3
  potvin-index-value               ; index id: 4
]

;general setup procedure, calls all other sub-setup procedures in some capacity to generate an initial state for the model
to setup
  ca
  
  set-constants
  set TOTAL-BANKRUPT-FIRMS 0
  
  create-households n-households [
    set shape "circle" 
    set ycor min-pycor + 1 + random 10
    set size 0.5
    set liquidity startup-liquidity  
  ]
  setup-firms
  initialize-framework-agreements
  
  ask households[
    set xcor liquidity / mean [liquidity] of households
    create-consumer-links-with n-of n-trading-links firms with [consumer-good-firm?][
      init-consumer-link
    ]
    if count my-employment-links = 0 [create-employment-link-with one-of firms [init-employment-link]]  ; households that didn't get employed when firms were created get employed
    set reservation-wage [wage-rate] of my-employer
    set-consumption             ; this has to be set after households have trading connections to calculate mean price
  ]

  ask firms [
    set liquidity startup-liquidity
    set months-failed-to-hire 0
    set demand n-workers * tech-parameter
    set desired-n-workers n-workers
    if input-data != "None" [ 
      set inventory 50
      set-daily-input-demands
    ]
  ]
  set LAST-TWO-YEARS-INVENTORY (list (sum [inventory] of firms))
  set CONSUMER-GOOD-FIRMS firms with [consumer-good-firm?]
  set PRIMARY-GOOD-FIRMS firms with [input-data = "None"]
  set INTERMEDIATE-GOOD-FIRMS firms with [not consumer-good-firm? and input-data != "None"]
  setup-equity-links
  set-colors
  ask one-of firms [ask my-links [show-link]]
  if include-visualizations? = False [
    ask turtles [
      hide-turtle
    ]
    ask links [
      hide-link
    ]
  ]
  reset-ticks
  tick
end

;procedure to initialize all global constants
to set-constants
  set MIN-WAGE-RATE 2.5
  set max-wage-growth 0.019                ; max amount wages are increased or decreased by if firm decides to change wage
  set months-to-lower-wage 12              ; after this many months of having all positions filled, a firm will decrease wages
  set max-price-growth 0.2                 ; max amount a firm increases/decreases prices by
  set buffer-labor-fraction 2              ; the fraction of labor costs to keep as a buffer 
  set diminishing-utility-constant 0.5     ; the decay rate of how much wealth is used on consumption by households, used in consumption function
  set prob-replace-firm-price 0.25         ; the probability of switching trading firms to a new firm with a better price
  set prob-replace-firm-quant 0.5          ; the probability of switching trading firms based on lack of quantity
  set n-trading-links 7                    ; number of firms contacted by consumers trying to buy consumer goods
  set n-framework-agreements 5             ; number of firms contacted by non-primary firms trying to buy input goods
  set MONTH-LENGTH 21                      ; tied to number of business days in a month
  set autonomous-consumption 1.6           ; represents a monetary amount of autonomous consumption among households, regardless of wage
  set startup-liquidity 100                ; agents are initialized to a constant liquidity
  
  (ifelse setup-structure = "single-firm" [
    set FIRM-STRUCTURE table:get (table:from-json-file "Single-Firm-structure.json") "Firms"
  ] 
  setup-structure = "two-layer" [
    set FIRM-STRUCTURE table:get (table:from-json-file "Two-Layer-Firm-structure.json") "Firms"
  ]
  setup-structure = "three-layer" [
    set FIRM-STRUCTURE table:get (table:from-json-file "Three-Layer-Firm-structure.json") "Firms"
  ]
  setup-structure = "diamond" [
    set FIRM-STRUCTURE table:get (table:from-json-file "Diamond-Firm-structure.json") "Firms"
  ]
  setup-structure = "looped-diamond" [
    set FIRM-STRUCTURE table:get (table:from-json-file "Looped-Diamond-Firm-structure.json") "Firms"
  ]
  setup-structure = "skipped-center" [
    set FIRM-STRUCTURE table:get (table:from-json-file "Skipped-Center-Firm-structure.json") "Firms"
  ])
  
end

;setup procedure for firms, creates every firm in the model according to the specifications in a json file
to setup-firms
  foreach FIRM-STRUCTURE[ f ->
    let group table:get f "Firm type"
    let num-firms table:get f "Firm count"
    let firm-input-data generate-input-data table:get f "Input data"
    let firm-tech-parameter table:get f "Tech constant"
    let is-consumer? table:get f "Consumer?"
    create-firms num-firms[
      set shape "building store"
      set tech-parameter firm-tech-parameter 
      set price 1 * small-random-change
      set firm-type group
      set input-data firm-input-data
      set wage-rate tech-parameter * transactions-per-month * small-random-change ;start with same wage rate as output, which is the tech parameter times transactions per month
      create-employment-link-with one-of households with [count my-employment-links = 0] [init-employment-link]
      set consumer-good-firm? is-consumer?
      set xcor 0
      set ycor 12 - random 5
      if input-data != "None" [set ycor ycor - 9]
    ]
  ]
end

to setup-equity-links
  ask firms [
    let num-employees count employment-link-neighbors
    let equity-per-employee 1 / num-employees
    let f self
    ask employment-link-neighbors [
      set liquidity liquidity - (equity-per-employee * [liquidity] of f)   ;this forces all liquidity to be initialized with households
      create-equity-link-with f [
        init-equity-link
        set equity equity-per-employee * [liquidity] of f    ;all employees should have equal amounts of equity-percent invested in the firm
      ]
    ]
  ]
end

;generates the input data for a specific firm based on the structure specified in a json file
to-report generate-input-data [original-data]
  ifelse length original-data = 0 [  ;;empty list means default settings
    report "None"
  ][
    let data-table table:make
    foreach original-data [i ->
      let inputi table:make
      table:put inputi "Marginal productivity" (table:get i "Marginal productivity")
      table:put inputi "Current stock" 30
      table:put inputi "Daily demand" 0
      table:put data-table (table:get i "Input firm type") inputi
    ]
    report data-table
  ]
end

;creates a single firm's framework agreements to all necessary suppliers
to initialize-framework-agreements
  ask firms with [input-data != "None"][
    foreach table:keys input-data[i ->
      let temp-n-framework-agreements n-framework-agreements
      if any? firms with [firm-type = i and n-out-agreements = 0][
        set temp-n-framework-agreements temp-n-framework-agreements - 1
        create-framework-agreement-from one-of firms with [firm-type = i and n-out-agreements = 0][
          init-framework-agreement i
        ]
      ]
      let current-firm self
      ask n-of temp-n-framework-agreements firms with [firm-type = i and not out-framework-agreement-neighbor? self][
        create-framework-agreement-to current-firm[
          init-framework-agreement i
        ]
      ]
    ]
  ]
end
