breed [households household]

;defines household specific fields
households-own [
  reservation-wage                ; minimal claim on labor income, although households will work for less under certain conditions
  demanded-consumption            ; the amount of goods that are demanded by each household
  liquidity                       ; i.e. money currently available  
  largest-firm-visited
]

;household procedure, searches for a cheaper consumer good vendor
to HOUSEHOLD.search-cheaper-vendor  
  if count my-consumer-links = 0 [
    error "Household has no consumer links to compare to"
  ]
  let current-trading-link max-one-of my-consumer-links [[price] of other-end]
  let random-firm HOUSEHOLD.pick-random-consumer-firm
  let current-price [price] of [other-end] of current-trading-link
  if ([price] of random-firm) < current-price [
    ask current-trading-link [die]
    create-consumer-link-with random-firm [init-consumer-link]
  ]
end

;household procedure, searches for a vendor to replace a current vendor that was unable to satisfy demand
to HOUSEHOLD.search-delivery-capable-vendor
  let link-failed-to-satisfy rnd:weighted-one-of my-consumer-links [demand-not-satisfied]
  if count my-consumer-links < N-TRADING-LINKS or [demand-not-satisfied] of link-failed-to-satisfy > 0 [
    create-consumer-link-with HOUSEHOLD.pick-random-consumer-firm [init-consumer-link]
    ask link-failed-to-satisfy [die]
  ]
end

;household procedure, makes sure every household has exactly N-TRADING-LINKS consumer-links. Ideally, I wouldn't even need this in the end, since consumer links should stay constant
to HOUSEHOLD.guarantee-consumer-links
  let curr-trading-links count my-consumer-links
  if curr-trading-links > N-TRADING-LINKS [
    ask n-of (curr-trading-links - N-TRADING-LINKS) my-consumer-links[
      die
    ]
  ]
  if curr-trading-links < N-TRADING-LINKS [
    create-consumer-links-with n-of (N-TRADING-LINKS - curr-trading-links) firms with [consumer-good-firm?][
      init-consumer-link
    ]
  ]
end

;household procedure, searches for employment if unemployed or better paying employment if employed
to HOUSEHOLD.search-for-employement  
  ifelse HOUSEHOLD.unemployed? [
    HOUSEHOLD.search-job    
  ] [
    HOUSEHOLD.search-better-paid-job
  ]
end

;household proceudre, searches for a potential employer under the condition that this household is unemployed, a more rigorous search than "search better paid job"
to HOUSEHOLD.search-job  
  let firms-tried 0
  while [HOUSEHOLD.unemployed? and firms-tried < SEARCH-N] [ 
    HOUSEHOLD.check-random-firm-for-job reservation-wage
    set firms-tried firms-tried + 1
  ]
end

;household procedure, searches for a better paying job under the condition that this household is employed
to HOUSEHOLD.search-better-paid-job  
  HOUSEHOLD.search-better-paid-job-logic random-float 1 < SEARCH-BETTER-JOB-PROB  ; This is the random probability that a household searches for a better paid job even if they are currently satisfied (pi in Lengnick
end

;household procedure, the logic behind searching for a better paid job
to HOUSEHOLD.search-better-paid-job-logic [search-even-if-satisfied?]
  if (HOUSEHOLD.unsatisfied-with-wage? or search-even-if-satisfied?) [ ; if wage-rate fell below reservation wage, then look for a new job or if the person is satisfied with current wage they might still look
    HOUSEHOLD.check-random-firm-for-job [wage-rate] of HOUSEHOLD.my-employer
  ]
end

;household procedure, checks a random firm for job availability and takes the position based on logic defined in the job search procedures
to HOUSEHOLD.check-random-firm-for-job [my-min-wage]  ; household procedure
  let the-firm nobody
  ifelse HOUSEHOLD.unemployed?
  [set the-firm one-of firms]
  [set the-firm [one-of other firms] of HOUSEHOLD.my-employer]

  if [desired-n-workers > n-workers] of the-firm and [wage-rate] of the-firm >= my-min-wage [

    if HOUSEHOLD.employed? [HOUSEHOLD.quit-job]

    create-employment-link-with the-firm [init-employment-link]    

  ]
end

;household procedure, quits current job by deleting the employment link
to HOUSEHOLD.quit-job
  ask my-employment-links [die]
end

;household procedure, sets daily consumption
to HOUSEHOLD.set-consumption
  if liquidity < 0 [error "no money to consume"]
  let money-to-spend 0
  ; let autonomous-consumption-in-dollars (AUTONOMOUS-CONSUMPTION * mean [price] of consumer-link-neighbors) ; we aren't usin autonomous consumption for now
  
  set money-to-spend min (list liquidity (liquidity ^ DIMINISHING-UTILITY-CONSTANT))  ; when wew were using autonomous-consumption, we added to the second item:  + autonomous-consumption-in-dollars))
  
  ;let total-consumption money-to-spend / mean [price] of CONSUMER-GOOD-FIRMS      ;on the off chance all 7 consumer links exit the market at the same time (highly unlikely, but still possible), this is a catch all
  ;if count consumer-link-neighbors > 0 [
   let total-consumption money-to-spend / mean [price] of consumer-link-neighbors
  ;]
  set demanded-consumption total-consumption / transactions-per-month
end

;household procedure, purchases consumption goods by purchasing the maximum amount possible from trading partners until either demand is satisfied or no partners remain
to HOUSEHOLD.buy-consumption-goods  ; household procedure
  let remaining-demand demanded-consumption
      
  let firms-to-try consumer-link-neighbors
  
  set largest-firm-visited one-of firms-to-try
  
  while [remaining-demand >= (0.01 * demanded-consumption) and any? firms-to-try] [  ; try to get within 1% of demand

    ; figure out the transaction
    let the-firm nobody
    ifelse pick-cheapest-firm? [
      set the-firm min-one-of firms-to-try [price]
    ] [
      set the-firm one-of firms-to-try ; min-one-of firms-to-try [price]
    ]
    
    if liquidity < 0 [error "negative liquidity"] 
    
    let goods-wanted min list remaining-demand (liquidity / [price] of the-firm)  ; demand is remaining-demand or as much as the buyer could afford.
    if goods-wanted < 0 [ error "must want more than 0 goods"]
    let amount-bought [FIRM.sell-good goods-wanted price] of the-firm

    ; adjust household variables
    set liquidity max (list 0 (liquidity - amount-bought * [price] of the-firm))
    if liquidity < 0 [error "negative liquidity after buying products"] 
    set remaining-demand remaining-demand - amount-bought

    if remaining-demand > 1E-10 [  ; if the amount bought does not satisfy demand (either because the firm didn't have inventory or because it was too expensive and the house couldn't afford)
      ask consumer-link-with the-firm [set demand-not-satisfied remaining-demand]
    ]
    ask the-firm [ set firms-to-try other firms-to-try]  ;  this firm from the available set of firms to try
    
    if [month-production] of the-firm > [month-production] of largest-firm-visited [
      set largest-firm-visited the-firm
    ]
  ]
end

;household procedure, adjusts the reservation wage of a household, or the minimum wage the household is willing to accept
to HOUSEHOLD.adjust-reservation-wage
  (ifelse
    HOUSEHOLD.unemployed? [
      set reservation-wage reservation-wage * RES-WAGE-CHANGE  ; Lengnick says at the end of 2.4, this happens
      
      if reservation-wage < (.85 * MIN-WAGE-RATE) [ ; reservation-wage shouldn't actually go below MIN-WAGE-RATE, but I want to let it a little so I can see it on the graph
        set reservation-wage .85 * MIN-WAGE-RATE
      ]
    ]
    
    [wage-rate] of HOUSEHOLD.my-employer > reservation-wage [  ; if I'm getting paid more than my previous res-wage, then rase my res-wage to current wage
      set reservation-wage [wage-rate] of HOUSEHOLD.my-employer
    ]
  )
end

;household procedure, reports the employer of a household
to-report HOUSEHOLD.my-employer
  report [other-end] of one-of my-employment-links  ; each household has only 1 b link, so this is the same everytime

end

;household procedure, reports true if the household is unemployed
to-report HOUSEHOLD.unemployed?  ; household procedure
  report count my-employment-links = 0
end

;household procedure, reports true if the household is employed
to-report HOUSEHOLD.employed?
  report count my-employment-links = 1
end

;household procedure, reports true if the household is making too small of a wage
to-report HOUSEHOLD.unsatisfied-with-wage?  ; household procedure
  report [wage-rate] of HOUSEHOLD.my-employer < reservation-wage
end

;household procedure, picks a random consumer good firm that is not a current trading partner of this household, weighted by # of employees
to-report HOUSEHOLD.pick-random-consumer-firm 
  report rnd:weighted-one-of firms with [not member? myself consumer-link-neighbors and consumer-good-firm?] [count my-employment-links]
end