;__includes["unit testing.nls"]  ;including this for purpose of using the helpful
extensions [csv]

to unit-tests
  run-tests (list    
    (list "Price and output tests" test-adjust-price-and-output)
    (list "Pay wage tests" test-pay-wages)
    ;(list "Fire worker tests" test-fire-workers)
    (list "Average sales tests" test-average-sales)
    (list "Wage rate tests" test-adjust-wage-rate)
    (list "gini-coefficient tests" test-gini-coefficient)
    (list "asymptotic land production tests" test-asymptotic-land-production)
  )
end




;;TO IMPLEMENT: Test trends that measure the reasonableness of the model (like unemployment rate and price)
;;We want users to be able to distinguish when the model is behaving appropriately when it might not be obvious from the output
to test-trends
  run-tests (list
  )
end


to test-unemployment
  setup
  repeat 100 [
    go
    assert ((1 - (count employment-links / count households)) < 0.5) "Unemployment must be below 50%"
  ]
end

;;OUTDATED: NEEDS UPDATING
;to-report test-remove-firm
;  report [->
;    set BANKRUPT-FIRM-PROFITS (list)
;    create-households 1
;    create-firms 1 [
;      set firm-type 0
;    ]
;    create-firms 1 [
;      ask households [create-equity-link-with myself]
;      ask my-equity-links [set equity 100]
;      set liquidity 100
;      set firm-type 0
;      remove-firm
;    ]
;    assert (count firms = 1) "Removed firm should be replaced"
;  ]
;end


to-report test-adjust-wage-rate
  report [->
    set MAX-WAGE-GROWTH 0.1
    set MONTHS-TO-LOWER-WAGE 2
    create-households 3
    create-firms 1 [
      set wage-rate 1
      set months-without-vacancies 0
      ask households [create-employment-link-with myself]
      set desired-n-workers 5 
      set fired-worker? false
      
      FIRM.adjust-wage-rate
      assert (wage-rate > 1) "wage should increase"
      
      set wage-rate 1
      set fired-worker? true
      FIRM.adjust-wage-rate
      assert (wage-rate < 1) "wage should decrease when we fired a worker last time period"
      
      set wage-rate 1
      set months-without-vacancies 3
      FIRM.adjust-wage-rate
      assert (wage-rate < 1) "wage should decrease when we have had a vacant position for too many months"
      
      set wage-rate 1
      set months-without-vacancies 1
      set fired-worker? false
      FIRM.adjust-wage-rate
      assert (wage-rate = 1) "wage should not change"
      
    ]
  ]
end

to-report test-adjust-price-and-output
  report [->
    let before-price 1
    create-firms 1 [
      set price before-price
      set average-previous-sales 100
    set tech-parameter 3
      set input-data table:make
      set liquidity 999999
      
      FIRM.adjust-output-and-price
      assert (price = before-price) "price should not have changed"
    ]
  ]
end

to-report test-pay-wages
  report [->
    ca
    set-constants
    create-households 3
    create-firms 1 [
      ask households [create-employment-link-with myself]
      set wage-rate 1
      set liquidity 4
      
      FIRM.pay-wages
      assert all? households [liquidity = 1] "households should have wage-rate liquidity after getting paid (22)"
      assert (liquidity = 1) "firm should have $1 left (23)"
                  
    ]
  ]
end
  
;;OUTDATED: NEEDS UPDATING
;to-report test-fire-workers
;  report [->
;    create-households 5
;    create-firms 1 [
;      ask households [create-employment-link-with myself]
;      assert (count my-employment-links = 5) "firms should initially have all 5 workers"
;      
;      set only-fire-1-per-month? false
;      set desired-n-workers 3
;      fire-workers
;      assert (count my-employment-links = 3) "firms should only fire two workers"
;      
;      set only-fire-1-per-month? true
;      set desired-n-workers 1
;      fire-workers
;      assert (count my-employment-links = 2) "firms should only fire one worker"
;    ]
;  ]
;end


to-report test-average-sales
  report [->
    create-firms 1 [
      set firm-memory-constant 0.5
      set average-previous-sales 0
      set previous-sales 0
      FIRM.calculate-average-sales
      assert average-previous-sales = 0 "average-previous-sales should not have changed"
      
      set previous-sales 1
      FIRM.calculate-average-sales
      assert average-previous-sales = 0.5 "average-previous-sales should be 0.5"
      
      set previous-sales 1
      FIRM.calculate-average-sales
      assert average-previous-sales = 0.75 "average-previous-sales should be 0.75"
    ]
  ]
end

to-report test-gini-coefficient
  report [->
    set n-households 3
    create-households 3 [
      set liquidity 1.5
    ]
    
    assert gini-coefficient = 0 "gini-coefficient != 0 with perfect equality"
    
    ask household 0 [set liquidity 0]
    ask household 1 [set liquidity 0]
    ask household 2 [set liquidity 5]    
    assert precision (gini-coefficient - (2 / 3)) 5 = 0 "gini-coefficient with perfect inequality not correct"
    
    ask household 0 [set liquidity 1]
    ask household 1 [set liquidity 2]
    ask household 2 [set liquidity 4]    
    assert precision (gini-coefficient - .286) 3 = 0 "gini-coefficient with some inequality not correct"
  ]
end

to-report test-asymptotic-land-production
  report [-> 
    set s 0.1  ; override what is on interface
    create-firms 1 [
      set  primary-good-firm? true
      set price 0.9
      set wage-rate 2.5
    ]    
    LAND.setup-patches 
    ask lands [set productive-capacity 60]  ; override what is on the interface
    
    let prod-to-meet-demand 10
    let n-desired-workers [FIRM.calc-ideal-workers-asymptotic-land-prod prod-to-meet-demand] of firm 0
    assert n-desired-workers = 21 "1. asymptotic land production output is wrong"
    
    
  ]
end



;; ;; TESTS for laands

to test-productive-capacity-change
  let inputs csv:from-file "land_tests.csv"
  foreach inputs[i ->
    let workers (item 0 i)
    let f-competency (item 1 i)
    let expected-change (item 2 i)
    show i
    run-land-test workers 20 0.25 1 10 expected-change
  ]
end


to run-land-test [n-workers opt change-fraction beta start-productive-capacity expected-change]
  ca
  set-constants
  create-lands 1[
    set productive-capacity start-productive-capacity
    set optimal-productive-capacity opt
    set MAXIMUM-PRODUCTIVE-CAPACITY-CHANGE-FRACTION change-fraction
    set MARGINAL-EFFECT-OF-LABOR-ON-LAND beta
  ]
  
  create-firms 1[
    set competency firm-competency
    set firm-location one-of lands
  ]
  create-households n-workers[
    create-employment-link-with one-of firms
  ]
  create-firms (n-workers - 1) [
    ;;This is a placeholder to balance out the ratio of workers to firms.
    ;;We have an input of n-workers that is meant to represent how much more you have, in relation to the average number of workers
    ;;If we have 10 firms and 40 workers, and a firm has 8 workers, his labor value will be 2 (twice as many as the average, 4)
  ]
  ask one-of firms with [count my-employment-links > 0] [
    let actual-effect 0
    let temp-competency competency
    let workers n-workers
    ask firm-location[
      set actual-effect LAND.labors-effect-on-land temp-competency workers
    ]
    
    show (word "Actual effect: " actual-effect)
    show (word "Expected change: " expected-change)
    let difference (abs (expected-change - actual-effect))
    assert (difference < 0.01) "Actual change different from expected"
  ]
end




