;household procedure, searches for a cheaper consumer good vendor
to search-cheaper-vendor  
  if count my-consumer-links = 0 [
    error "Household has no consumer links to compare to"
  ]
  let current-trading-link one-of my-consumer-links
  let random-firm pick-random-consumer-firm
  let current-price [price] of [other-end] of current-trading-link
  if ([price] of random-firm) * (1 + price-diff-lower-bound) < current-price [  ; Switch if new price is at least ξ% lower
    ask current-trading-link [die]
    create-consumer-link-with random-firm [init-consumer-link]
  ]
end

;household procedure, searches for a vendor to replace a current vendor that was unable to satisfy demand
to search-delivery-capable-vendor
  let link-failed-to-satisfy rnd:weighted-one-of my-consumer-links [demand-not-satisfied]
  if my-consumer-links = 0 or [demand-not-satisfied] of link-failed-to-satisfy > 0 [
    create-consumer-link-with pick-random-consumer-firm [init-consumer-link]
    ask link-failed-to-satisfy [die]
  ]
end

;household procedure, makes sure every household has exactly n-trading-links consumer-links. Ideally, I wouldn't even need this in the end, since consumer links should stay constant
to guarantee-trading-links
  let curr-trading-links count my-consumer-links
  if curr-trading-links > n-trading-links [
    ask n-of curr-trading-links - n-trading-links my-consumer-links[
      die
    ]
  ]
  if curr-trading-links < n-trading-links [
    create-consumer-links-with n-of n-trading-links firms with [consumer?][
      init-consumer-link
    ]
  ]
end


;household procedure, picks a random consumer good firm that is not a current trading partner of this household, weighted by # of employees
to-report pick-random-consumer-firm 
  report rnd:weighted-one-of firms with [not member? myself consumer-link-neighbors and consumer?] [count my-employment-links]
end

;household procedure, searches for employment if unemployed or better paying employment if employed
to search-for-employement  
  ifelse unemployed? [
    search-job
  ] [
    search-better-paid-job
  ]

end

;household proceudre, searches for a potential employer under the condition that this household is unemployed, a more rigorous search than "search better paid job"
to search-job  
  let firms-tried 0
  while [unemployed? and firms-tried < 5] [ ; 5 is  β in Lengnick
    check-random-firm-for-job reservation-wage
    set firms-tried firms-tried + 1
  ]
end

;household procedure, searches for a better paying job under the condition that this household is employed
to search-better-paid-job  
  search-better-paid-job-logic random-float 1 < 0.1  ; This is the random probability that a household searches for a better paid job even if they are currently satisfied (pi in Lengnick
end

;household procedure, the logic behind searching for a better paid job
to search-better-paid-job-logic [search-even-if-satisfied?]
  if [n-workers] of my-employer > 1 and   ; only allowed to search for better paid job if the firm will still have another worker
  (unsatisfied-with-wage? or search-even-if-satisfied?) [ ; if wage-rate fell below reservation wage, then look for a new job or if the person is satisfied with current wage they might still look
    check-random-firm-for-job [wage-rate] of my-employer
  ]
end

;household procedure, checks a random firm for job availability and takes the position based on logic defined in the job search procedures
to check-random-firm-for-job [min-wage]  ; household procedure
  let the-firm nobody
  ifelse unemployed?
  [set the-firm one-of firms]
  [set the-firm [one-of other firms] of my-employer]

  if [open-position?] of the-firm and [wage-rate] of the-firm >= min-wage [

    if employed? [quit-job]

    create-employment-link-with the-firm [init-employment-link]
    ;ask the-firm [set desired-labor-change desired-labor-change - 1]

    ask the-firm [
      set open-position? false  ;
      set filled-position? true
      set close-position? false  ; this shouldn't need to happen here, but why not
    ]
  ]
end

;household procedure, quits current job by deleting the employment link
to quit-job
  ask my-employer [
    set close-position? false
  ]
  ask my-employment-links [die]
end


;household procedure, sets daily consumption LENGNICK VERSION
to set-consumption
  let mean-price mean [price] of consumer-link-neighbors  ; households only know prices of their trading firms
  let total-consumption min list (liquidity / mean-price) (ideal-consumption liquidity  mean-price)  ; if liquidity/mean-price < 1, then they don't have enough money for ideal consumption
  set demanded-consumption total-consumption / transactions-per-month
end


;household procedure, reports ideal daily consumption based on some propensity to save, called by set-consumption
to-report ideal-consumption [money mean-price]
  let ic 0
  carefully [
    set ic (money / mean-price) ^ diminishing-utility-constant  ; is α in Lengnick. Consumption increases with wealth at decaying rate
  ] [  ; sometimes with really low money, NetLogo throws an error that (money / mean-price) ^ 0.9 is not a number
    print error-message
  ]
  report ic
end

; This was my original version. I changed to the version below which looks equivalent to me but yields different behavior.
;to buy-consumption-goods  ; household procedure
;  ask my-consumer-links [set demand-not-satisfied 0]
;  let total-bought 0
;  let firms-to-try consumer-link-neighbors with [inventory > 0]  ; in Lengnick, all 7 firms are tried if necesary.
;  while [total-bought < 0.95 * demanded-consumption and any? firms-to-try] [
;    ; figure out the transaction
;    let the-firm one-of firms-to-try
;
;    let my-demand min list demanded-consumption (liquidity / [price] of the-firm) ; demand was demanded-consumption or as much as the buyer could afford. Note, Lengnick doesn't explain exactly how demand is calculated.
;    let relevant-inventory min list demanded-consumption ([inventory] of the-firm)
;    let total-cost min list liquidity (relevant-inventory * [price] of the-firm)
;
;    ; set whether demand was met from this firm
;    ask consumer-link-with the-firm [
;      set demand-not-satisfied max list 0 (my-demand - relevant-inventory)  ; must be >= 0 Lengnick uses this to probabilistically determine firms to cut ties with, but doesn't say exactly how he calculates it
;    ]
;
;    ; adjust household variables
;    set liquidity liquidity - total-cost
;    let goods-sold total-cost / [price] of the-firm
;    set total-bought total-bought + goods-sold
;
;    ; adjust firm variables
;    ask the-firm [
;      set demand demand + my-demand
;      set inventory precision (inventory - goods-sold) 10
;      if inventory < 0 [error "inventory cannot be negative"]
;      set liquidity liquidity + total-cost
;      set firms-to-try other firms-to-try  ; remove this firm from the available set
;    ]
;  ]
;end

;household procedure, purchases consumption goods by purchasing the maximum amount possible from trading partners until either demand is satisfied or no partners remain
to buy-consumption-goods  ; household procedure
  ;ask my-consumer-links [set demand-not-satisfied 0]
  let remaining-demand demanded-consumption
  let firms-to-try consumer-link-neighbors

  while [remaining-demand >= (0.05 * demanded-consumption) and any? firms-to-try] [

    ; figure out the transaction
    let the-firm one-of firms-to-try

    let goods-wanted min list demanded-consumption (liquidity / [price] of the-firm)  ; demand is demanded-consumption or as much as the buyer could afford. Note, Lengnick doesn't explain exactly how demand is calculated.
    let amount-bought [sell-consumption-good goods-wanted] of the-firm

    ; adjust household variables
    set liquidity liquidity - amount-bought * [price] of the-firm
    set remaining-demand remaining-demand - amount-bought

    if remaining-demand > 1E-10 [  ; if the amount bought does not satisfy demand (either because the firm didn't have inventory or because it was too expensive and the house couldn't afford)
      ask consumer-link-with the-firm [set demand-not-satisfied remaining-demand]
    ]
    ask the-firm [ set firms-to-try other firms-to-try]  ;  this firm from the available set of firms to try
  ]
end

;household procedure, adjusts the reservation wage of a household, or the minimum wage the household is willing to accept
to adjust-reservation-wage
  (ifelse
    unemployed? [
      set reservation-wage reservation-wage * .9  ; Lengnick says at the end of 2.4, this happens
    ]
    [wage-rate] of my-employer > reservation-wage [
      set reservation-wage [wage-rate] of my-employer
    ]
  )
end

to set-household-xcor
  let house-liq-mean mean [liquidity] of households
  let house-liq-stdev max (list 0.01 standard-deviation [liquidity] of households)
  set xcor max (list min-pxcor (min (list max-pxcor (3 * (liquidity - house-liq-mean) / house-liq-stdev))))
end

;household procedure, reports the employer of a household
to-report my-employer
  report [other-end] of one-of my-employment-links  ; each household has only 1 b link, so this is the same everytime

end

;household procedure, reports true if the household is unemployed
to-report unemployed?  ; household procedure
  report count my-employment-links = 0
end

;household procedure, reports true if the household is employed
to-report employed?
  report count my-employment-links = 1
end

;household procedure, reports true if the household is making too small of a wage
to-report unsatisfied-with-wage?  ; household procedure
  report [wage-rate] of my-employer < reservation-wage
end