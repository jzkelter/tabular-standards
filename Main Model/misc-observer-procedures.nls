;observer procedure, initializes a single consumer link
to init-consumer-link
  hide-link
end

;observer procedure, initializes a single employment link
to init-employment-link
  set color blue
  hide-link
end

;observer procedure, initializes a single equity link
to init-equity-link
  hide-link
end

;observer procedure, initializes a single framework agreement
to init-framework-agreement 
  set demand-not-satisfied 0
  set index-type choose-index
  (ifelse index-type = 0 [
    set index-multiplier [price] of end1
  ] 
  index-type = 1 [
    set index-multiplier [price] of end1 / pringle-index-value
  ] 
  index-type = 2 [
    set index-multiplier [price] of end1 / coats-index-value
  ] 
  index-type = 3 [
    set index-multiplier [price] of end1 / ussher-index-value
  ] 
  index-type = 4 [
    set index-multiplier [price] of end1 / potvin-index-value
  ]) 
  set expiration-date (month + framework-duration)
  hide-link
end

;observer procedure, recalculates the current index
to recalculate-index-pringle
  set pringle-index-value sum [equity] of equity-links         ;fixed firm implementation fixes index to be equal to firm number
end

;observer procedure, recalculates the current index
to recalculate-index-coats
  set coats-index-value sum [price] of firms 
end

;observer procedure, recalculates the current index
to recalculate-index-ussher
  update-rolling-mean-inventory
  set ussher-index-value mean PRIMARY-INVENTORY-VALUE-HISTORY
end

;observer procedure, recalculates the current index
to recalculate-index-potvin
  set potvin-index-value 1
  ;implementation TBD
end

to set-colors
  let firm-colors (list black green brown red orange blue gray yellow pink)
  ask firms [
    set color (item (firm-type mod 8) firm-colors) + 1.5   ; mod 8 prevents an error for being thrown if we ever decide to run with more than 8 firm types
  ]
  ask households [
    ifelse unemployed? [
      set color red
    ] [
      set color blue
    ]
  ]
end

;observer procedure, recalculates rolling average of the sum of past two years inventory
to update-rolling-mean-inventory
  ifelse month < 24 [
    set PRIMARY-INVENTORY-VALUE-HISTORY lput (sum [inventory * price] of PRIMARY-GOOD-FIRMS) PRIMARY-INVENTORY-VALUE-HISTORY 
  ] [
    set PRIMARY-INVENTORY-VALUE-HISTORY lput (sum [inventory * price] of PRIMARY-GOOD-FIRMS) but-first PRIMARY-INVENTORY-VALUE-HISTORY 
  ]
end

;observer procedure to generate the correct location from the firms' liquidity
to set-firm-xcor
  let firm-liq-dev max (list 1 (max [liquidity] of firms)) / (world-width - 2)
  ask firms [
    set xcor min-pxcor + (liquidity / firm-liq-dev)
  ]
end

;observer procedure, realligns households visually to represent liquidity
to set-household-xcor
  let max-house-liq (max [liquidity] of households) 
  ask households [
    set xcor min-pxcor + (liquidity) / max-house-liq * (world-width - 1)
  ]
end

;observer procedure, reports the current year of the model
to-report year
  report month / 12
end

;observer procedure, reports some random small number ranging from 0.99 to 1.01, used for adjusting wage rates and prices
to-report small-random-change
  report (1 + (random-float 1 - 0.5) / 50)
end