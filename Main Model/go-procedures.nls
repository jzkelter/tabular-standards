
;;***************GO****************************
;general go procedure, runs the beginning of the month, then the month, then the end of the month
to go    
  go-beginning-of-month-observer  
  go-beginning-of-month-firms  
  go-beginning-of-month-households  
  go-month  
  go-end-of-month
  if go-crashed?[
    stop
  ]
  tick
end

;egeneral beginning of the month procedure for resetting all model-wide varibales 
to go-beginning-of-month-observer 
  land-endogenously-renews
  recalculate-index-pringle 
  recalculate-index-coats
  recalculate-index-ussher
  recalculate-index-potvin
  set-colors
end

;general beginning of the month procedure for firms, see firm-procedures.nls for descriptions on each of these procedures
to go-beginning-of-month-firms
  
  ask firms [    
    firm-pay-wages  ; pay workers for last month's work
    
    if liquidity <= wage-rate [  
      firm-replace-firm
    ]
    firm-calculate-average-sales
    firm-search-for-framework-agreements
    ;search-delivery-capable-supplier and vendor used to be here
    
    firm-adjust-wage-rate
    firm-adjust-output-and-price
    firm-lay-off-workers
    set demand 0  ; reset demand for the month
    set previous-sales 0 ; reset how many goods were sold from the previous month          
  ]
end

;general beginning of the month procedure for households, see household-procedures.nls for descriptions of each of these procedures
to go-beginning-of-month-households
  ask households [
    if liquidity < 0 [error "negative liquidity beginning of month"] 
    household-guarantee-consumer-links
    if random-float 1 < PROB-REPLACE-FIRM-PRICE  [household-search-cheaper-vendor]
    if random-float 1 < PROB-REPLACE-FIRM-QUANT [household-search-delivery-capable-vendor]  
    household-search-for-employement
    household-set-consumption
  ]
end

;runs the daily production cycle for one month
to go-month
  repeat transactions-per-month [
    ask firms [
      ;check-framework-profitability   ; needs to occur after all frameworks are generated at beginning of month
      firm-buy-input-goods
      firm-produce-goods
    ]
    ask households [
      household-buy-consumption-goods
    ]
  ]
end

;general proccedure for the end of the month, see firm and household files for descriptions of each of thes procedures
to go-end-of-month
  if (sum [liquidity] of firms) + (sum [liquidity] of households) < 0.9999 * STARTUP-LIQUIDITY * n-households [error "liquidity is leaking"]
  if (sum [liquidity] of firms) + (sum [liquidity] of households) > 1.0001 * STARTUP-LIQUIDITY * n-households [error "liquidity is increasing"]
  
  let mean-liquidity mean [liquidity] of CONSUMER-GOOD-FIRMS
  
  ask firms [
    if wage-rate < MIN-WAGE-RATE [error "firm has wage lower than policy minimum wage"]
    firm-distribute-profits
    (ifelse desired-n-workers <= n-workers [
      set months-without-vacancies months-without-vacancies + 1
    ] [
      set months-without-vacancies 0    ;if desired-n-workers > n-workers, then we failed to hire, i.e. had a vacancy
    ])
  ]
  
  set mean-liquidity mean [liquidity] of CONSUMER-GOOD-FIRMS
  
  ask households [ 
    household-adjust-reservation-wage
  ]

  set-firm-xcor
  set-household-xcor

  set UNEMPLOYMENT-RATES (lput (1 - count employment-links / n-households) UNEMPLOYMENT-RATES)
  set MEAN-PRICES (lput mean [price] of firms MEAN-PRICES)
  
  set month month + 1
  
end

to-report go-crashed?
  let n length UNEMPLOYMENT-RATES
  set n (n - 1)
  let c 0
  while [c < 50 and n >= 0][
    let curr-rate item n UNEMPLOYMENT-RATES
    if curr-rate < 0.8[
      report false
    ]
    set c c + 1
    set n n - 1
  ]
  report true
end





