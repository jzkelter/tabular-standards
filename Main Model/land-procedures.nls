breed [lands  land]

;;changed this to patches, but we can always change back
lands-own [
  productive-capacity              ; the soil health located under the firm, possible change to patch variable?
  patch-pointer                    ; points to corresponding patch
  optimal-productive-capacity
  maximum-productive-capacity-increase
  maximum-productive-capacity-decrease
  optimal-productive-capacity
  MAXIMUM-PRODUCTIVE-CAPACITY-CHANGE-FRACTION ;constant, should be elsewhere, here for now
  MARGINAL-EFFECT-OF-LABOR-ON-LAND
  MAXIMUM-RENEWAL-FRACTION
]

to LAND.setup-patches 
  create-lands count PRIMARY-GOOD-FIRMS [
    let min-land-who min [who] of lands
    let x-per-land world-width / count lands
    setxy (who - min-land-who) * x-per-land max-pycor
    set shape "square"
    set color green
    
    set productive-capacity random-normal 50 5
    set optimal-productive-capacity 100
    set MAXIMUM-PRODUCTIVE-CAPACITY-CHANGE-FRACTION 0.25
    set MAXIMUM-RENEWAL-FRACTION 0.1 ;Arbitrary
    set patch-pointer 0
    set color scale-color green productive-capacity 0 200
  ] 
  ask firms [
    set firm-location one-of lands with [patch-pointer = 0]
    ask firm-location[
      set patch-pointer 0
    ]
    set competency firm-competency
  ]
end

;;NOTE, I have yet to actually implement this, but if we end up using this, every time production is calculated, it would be multiplied by this constant
;firm procedure, reports the calculated productivity multiplier for max production
to-report LAND.calculate-productivity-multiplier
  if index-in-use != "potvin" [
    report 1
  ]
  report 1 ;;temp, we need to discuss
end

;observer procedure, updates the soil health of the patches 
to LAND.update-productive-capacity
  ask firms [  
    let temp-competency competency
    let temp-n-workers n-workers
    ask firm-location [
      set productive-capacity productive-capacity + LAND.calculate-endogenous-renewal ;;Needs to happen before harvest-based degradation because it is impacted by the productive capacity
      set productive-capacity productive-capacity + (LAND.labors-effect-on-land temp-competency temp-n-workers)
      set color scale-color green productive-capacity 0 200
    ]
  ]
end

to-report LAND.calculate-endogenous-renewal 
  let alpha ((-4 * MAXIMUM-RENEWAL-FRACTION) / (optimal-productive-capacity ^ 2)) ; y-intercept balancer
  let beta optimal-productive-capacity / 2 ;reaches maximum amount at half the productive capacity
  let gamma MAXIMUM-RENEWAL-FRACTION ;maximum value
  let renewal-rate alpha * ((productive-capacity - beta) ^ 2) + gamma
  report renewal-rate * optimal-productive-capacity
end

to-report LAND.labors-effect-on-land [f-competency f-labor]
  let marginal-effect 1
  let change-factor 0
  LAND.calculate-maximum-productive-capacity-change
  ifelse f-competency > 0 [   ;we could reasonably change this back to 0, if it is easier to understand, but I will leave it for consistency
    set change-factor maximum-productive-capacity-increase
  ] [
    set change-factor -1 * maximum-productive-capacity-decrease
  ]
  set marginal-effect MARGINAL-EFFECT-OF-LABOR-ON-LAND
  let effect-on-land 2 * ((change-factor / (1 + e ^ (-1 * (f-competency) * ((f-labor / (count households)) * (count firms)) ^ marginal-effect))) - (change-factor / 2))
  ifelse change-factor < 0 [
    report -1 * effect-on-land
  ] [
    report effect-on-land
  ]
  ;Equation: https://www.desmos.com/calculator/8zmmossndi
end

to LAND.calculate-maximum-productive-capacity-change
  set maximum-productive-capacity-increase (optimal-productive-capacity - productive-capacity) * MAXIMUM-PRODUCTIVE-CAPACITY-CHANGE-FRACTION
  set maximum-productive-capacity-decrease (productive-capacity) * MAXIMUM-PRODUCTIVE-CAPACITY-CHANGE-FRACTION ;worst case normalized to 0
end
